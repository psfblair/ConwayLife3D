namespace ConwayLife3D

open ConwayLife3D.Life.Core

module Patterns =
    let TEST_2D: Generation = 
        Set.ofList [
                ( 0,  0,  0); 
                ( 1,  1,  0); 
                ( 1, -1,  0); 
                (-1,  1,  0); 
                (-1, -1,  0); 
                ( 0,  2,  0); 
                ( 2,  0,  0); 
                ( 0, -2,  0); 
                (-2,  0,  0); 
                ( 2,  2,  0); 
                ( 2, -2,  0); 
                (-2, -2,  0); 
                (-2,  2,  0); 
                ( 1,  3,  0); 
                ( 1, -3,  0); 
                (-1,  3,  0); 
                (-1, -3,  0); 
                ( 3,  3,  0); 
                ( 3, -3,  0); 
                (-3,  3,  0); 
                (-3, -3,  0); 
                ( 3,  1,  0); 
                ( 3, -1,  0); 
                (-3,  1,  0); 
                (-3, -1,  0); 
        ]

    // Still patterns
    let V: Generation = 
        Set.ofList [
                (-1, -1, -1); 
                ( 0, -1, -1); 
                (-1,  0, -1); 
                ( 0,  0, -1); 
                (-1, -1,  0); 
                ( 0, -1,  0)
        ]

    let CROSS: Generation = 
        Set.ofList [
                ( 0,  0, -1); 
                ( 0, -1,  0); 
                (-1,  0,  0); 
                ( 1,  0,  0); 
                ( 0,  1,  0); 
                ( 0,  0,  1)
        ]

    let PILLAR: Generation = 
        Set.ofList [
                ( 0, -1, -1); 
                (-1,  0, -1); 
                ( 1,  0, -1); 
                ( 0,  1, -1); 
                ( 0, -1,  0); 
                (-1,  0,  0); 
                ( 1,  0,  0); 
                ( 0,  1,  0)
        ]

    // Changing patterns
    let BLINKER_P2: Generation = 
        Set.ofList [
                ( 0,  0, -1); 
                ( 0, -1,  0); 
                (-1,  0,  0); 
                ( 1,  0,  0); 
                ( 0,  1,  0); 
                (-1,  0,  1); 
                ( 1,  0,  1)
        ]

    let DOUBLE_BLINKER_P2: Generation = 
        Set.ofList [
                ( 0, -1, -1); 
                ( 0,  1, -1); 
                ( 0, -1,  0); 
                (-1,  0,  0); 
                ( 1,  0,  0); 
                ( 0,  1,  0); 
                (-1,  0,  1); 
                ( 1,  0,  1)
        ]

    let TRIPLE_BLINKER_1_P2: Generation = 
        Set.ofList [
                (-1, -1, -2); 
                (-1,  0, -2); 
                (-2, -1, -1); 
                ( 1,  0, -1); 
                (-1,  1, -1); 
                ( 0,  1, -1); 
                (-1, -2,  0); 
                ( 0, -2,  0); 
                (-2, -1,  0); 
                ( 1,  0,  0); 
                ( 0, -1,  1); 
                ( 0,  0,  1)
        ]

    let TRIPLE_BLINKER_2_P2: Generation = 
        Set.ofList [
                (-1, -1, -2); 
                ( 0, -1, -2); 
                ( 0, -2, -1); 
                ( 1, -1, -1); 
                ( 1,  0, -1); 
                (-1,  1, -1); 
                ( 0, -2,  0); 
                (-2, -1,  0); 
                (-2,  0,  0); 
                (-1,  1,  0); 
                (-1,  0,  1); 
                ( 0,  0,  1)
                ]

    let THREE_HALFS_BLINKER_P2: Generation = 
        Set.ofList [
                ( 0, -1, -1); 
                (-1,  0, -1); 
                ( 1,  0, -1); 
                (-1, -1,  0); 
                ( 1,  0,  0); 
                (-1,  1,  0); 
                ( 0,  1,  0); 
                ( 0, -1,  1); 
                ( 0,  0,  1)
                ]

    let PUFFER_P4: Generation = 
        Set.ofList [
                ( 0, -1, -1); 
                ( 0,  0, -1); 
                ( 0, -2,  0); 
                (-1, -1,  0); 
                ( 1, -1,  0); 
                (-1,  0,  0); 
                ( 1,  0,  0); 
                ( 0,  1,  0)
                ]

    let PINWHEEL_P4: Generation = 
        Set.ofList [
                (-1,  1, -1); 
                ( 0,  1, -1); 
                (-1, -1,  0); 
                ( 0, -1,  0); 
                (-2,  0,  0); 
                ( 1,  0,  0); 
                (-1,  0,  1); 
                ( 0,  0,  1); 
                (-1,  1,  1); 
                ( 0,  1,  1)
                ]

    let HEART_P4: Generation = 
        Set.ofList [
                (-1, -1, -1); 
                (-1,  0, -1); 
                ( 0,  0, -1); 
                ( 0, -1,  0); 
                (-2,  0,  0); 
                ( 1,  0,  0);      
                (-1, -1,  1); 
                (-1,  1,  1); 
                ( 0,  1,  1)
                ]

    let ARROW_P4: Generation = 
        Set.ofList [
                ( 0, -1, -1); 
                ( 0,  0, -1); 
                ( 0, -2,  0); 
                ( 1, -1,  0); 
                ( 1,  0,  0); 
                ( 0,  1,  0); 
                (-1, -1,  1); 
                (-1,  0,  1)
                ]

    let ROTOR_P2: Generation = 
        Set.ofList [
                ( 0, -1, -1); 
                ( 0,  0, -1); 
                ( 0, -2,  0); 
                (-1, -1,  0); 
                ( 1, -1,  0); 
                (-1,  0,  0); 
                ( 1,  0,  0); 
                ( 0,  1,  0); 
                ( 0, -1,  1); 
                ( 0,  0,  1)
                ]


    let BRONCO_P4: Generation = 
        Set.ofList [
                ( 0, -1, -1); 
                ( 0,  0, -1); 
                ( 0, -2,  0); 
                (-1, -1,  0); 
                ( 1, -1,  0); 
                (-1,  0,  0); 
                ( 1,  0,  0); 
                ( 0,  1,  0); 
                (-1, -1,  1); 
                (-1,  0,  1)
                ]


    let TRIPUMP_P2: Generation = 
        Set.ofList [
                ( 0, -2, -2); 
                (-2, -1, -2); 
                (-1, -1, -2); 
                ( 0, -1, -2); 
                ( 0, -2, -1); 
                (-2,  0, -1); 
                (-2,  1, -1); 
                (-1,  1, -1); 
                ( 1, -2,  0); 
                ( 1, -1,  0); 
                ( 1,  0,  0); 
                (-1,  1,  0); 
                ( 0,  0,  1); 
                ( 1,  0,  1); 
                (-1,  1,  1)
                ]


    let WINDSHIELDWIPER_OR_HELICOPTER_P2: Generation = 
        Set.ofList [
                (-2, -1, -2); 
                (-1, -1, -2); 
                ( 0,  0, -2); 
                (-1, -2, -1); 
                (-2, -1, -1); 
                ( 1,  0, -1); 
                (-1,  1, -1); 
                ( 0,  1, -1); 
                ( 1,  1, -1); 
                ( 0, -2,  0); 
                (-2, -1,  0); 
                ( 1, -1,  0); 
                ( 0, -2,  1); 
                ( 0, -1,  1); 
                ( 0,  0,  1)
                ]


    let WALTZER_P6: Generation = 
        Set.ofList [
                (-2, -1, -1); 
                (-1, -1, -1); 
                ( 0, -1, -1); 
                (-2,  0, -1); 
                (-1,  1, -1); 
                ( 0,  1, -1); 
                (-2, -1,  0); 
                (-2,  0,  0); 
                ( 1,  0,  0); 
                ( 1,  1,  0); 
                (-1,  0,  1); 
                ( 0,  0,  1); 
                ( 0,  1,  1)
                ]

    let BIG_WALTZER_P6: Generation = 
        Set.ofList [
                ( 0, -1, -1); 
                ( 1, -1, -1); 
                (-1,  0, -1); 
                ( 0,  0, -1); 
                (-1,  1, -1); 
                ( 0, -2,  0); 
                ( 1, -2,  0); 
                (-2,  0,  0); 
                (-2,  1,  0); 
                ( 0, -1,  1); 
                ( 1, -1,  1); 
                (-1,  0,  1); 
                ( 0,  0,  1); 
                (-1,  1,  1)
                ]

    let SEESAW_P2: Generation = 
        Set.ofList [
                ( 0,  0, -2); 
                (-2, -1, -1); 
                (-1, -1, -1); 
                (-2,  0, -1); 
                ( 0,  1, -1); 
                (-1, -1,  0); 
                ( 1,  0,  0); 
                ( 0,  1,  0); 
                ( 1,  1,  0); 
                (-1,  0,  1)
                ]

    let COLLISION_TO_REDIRECTION: Generation = 
        Set.ofList [
                (-3,  5, -7); 
                ( 0,  5, -7); 
                (-3,  4, -7); 
                ( 0,  4, -7); 
                (-2,  3, -7); 
                (-1,  3, -7); 
                (-2,  5, -6); 
                (-1,  5, -6); 
                (-2,  4, -6); 
                (-1,  4, -6); 
                ( 1, -2,  1); 
                ( 1, -3,  2); 
                ( 0, -2,  2); 
                ( 2, -2,  2); 
                ( 1, -1,  2); 
                ( 0, -2,  3); 
                ( 2, -2,  3)
                ]

    let COLLISION_TO_SEESAW_P2: Generation = 
        Set.ofList [
                (-4, -6, -7); 
                (-1, -6, -7); 
                (-4, -5, -7); 
                (-1, -5, -7); 
                (-3, -4, -7); 
                (-2, -4, -7); 
                (-3, -6, -6); 
                (-2, -6, -6); 
                (-3, -5, -6); 
                (-2, -5, -6); 
                ( 1,  4,  6); 
                ( 2,  4,  6); 
                ( 0,  5,  6); 
                ( 3,  5,  6); 
                ( 0,  6,  6); 
                ( 3,  6,  6); 
                ( 1,  5,  5); 
                ( 2,  5,  5); 
                ( 1,  6,  5); 
                ( 2,  6,  5)
                ]


